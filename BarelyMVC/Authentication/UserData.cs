/*
    Copyright 2011 Jordan "Earlz" Earls <http://lastyearswishes.com>

    This file is part of FSCAuth.
    This project is dual licensed under the GPL and a commercial license. Please see http://www.binpress.com/app/fscauth/231 to purchase a license
    for use in commercial/non-GPL projects.
 
    FSCAuth is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation, version 3 of the License.
 
    FSCAuth is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with FSCAuth. If not, see http://www.gnu.org/licenses/.
*/
using System;
using System.Collections.Generic;
namespace Earlz.BarelyMVC.Authentication
{
	/// <summary>
	/// The class to function as a DTO for user data.
    /// Intended to be a base class. Note, if this class is derived from and intended to be
    /// used in your own project, your IUserStore derived class, must be consistent in using
    /// a single UserData type. 
	/// </summary>
	public class UserData
	{
		public UserData()
		{
			Groups=new List<GroupData>();
		}
		/// <summary>
        /// The user's username. This should be unique among all users.
		/// </summary>
		public virtual string Username{get;set;}
		/// <summary>
        /// The user's password hash. This is generated by Authentication.ComputePasswordHash()
		/// </summary>
		public virtual string PasswordHash{get;set;}
		/// <summary>
        /// The user's email. Not used by Authentication; only provided for convenience.
		/// </summary>
		public virtual string EmailAddress{get;set;}
		/// <summary>
        /// The unique ID assigned to the user. In a relational database, this could be something like a Row ID.
        /// This is populated by IUserStore upon saving to database/store
		/// </summary>
		public virtual string UniqueID{get;set;} 
		
		/// <summary>
		/// Salt which is used in password hashes and login hashes. 
		/// </summary>
		public virtual string Salt{get;set;}
		/// <summary>
        /// A list of groups the user belongs to.
		/// </summary>
		public virtual List<GroupData> Groups{get;set;}
		
		/// <summary>
		/// Updates the UserStore with this UserData. Basically a shortcut for Authentication.UserStore.UpdateByID
		/// </summary>
		/// <returns>
		/// true if user updated successfully
		/// </returns>
		public bool Update(){
			if(string.IsNullOrEmpty(UniqueID)){
				return false;
			}
			return FSCAuth.UserStore.UpdateUserByID(this);
		}
		/// <summary>
		/// Inserts this UserData into the UserStore, generating the password in the process. Basically a shortcut for Authentication.AddUser
		/// </summary>
		/// <param name="password">
		/// The password to use for this user
		/// </param>
		/// <returns>
		/// true if successfully inserted
		/// </returns>
		public bool SaveNew(string password){
			if(!string.IsNullOrEmpty(UniqueID)){ //UniqueID can't already be set
				return false;
			}
			return FSCAuth.AddUser(this,password);
		}
		/// <summary>
		/// Deletes this UserData from the UserStore. Note, if successful, UniqueID will be set to null as well.
		/// </summary>
		/// <returns>
		/// true if successfully deleted
		/// </returns>
		public bool Delete(){
			bool res=FSCAuth.UserStore.DeleteUserByID(this);
			if(res){
				UniqueID=null;
			}
			return res;
		}
		/// <summary>
		/// Resets the password for this UserData, as well as updating the password for it in the UserStore. 
		/// </summary>
		/// <returns>
		/// The generated password. Returns null on error.
		/// </returns>
		public string ResetPassword(){
			if(string.IsNullOrEmpty(UniqueID)){
				return null;
			}
			return FSCAuth.ResetPassword(this);
		}
	}
}

