/*
Copyright (c) 2010 - 2012 Jordan "Earlz/hckr83" Earls  <http://lastyearswishes.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.
   
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
using System;
using System.Collections.Generic;
namespace Earlz.BarelyMVC.Authentication
{
    /// <summary>
    /// The class to function as a DTO for user data.
    /// Intended to be a base class. Note, if this class is derived from and intended to be
    /// used in your own project, your IUserStore derived class, must be consistent in using
    /// a single UserData type. 
    /// </summary>
    public class UserData
    {
        public UserData()
        {
            Groups=new List<GroupData>();
        }
        /// <summary>
        /// The user's username. This should be unique among all users.
        /// </summary>
        public virtual string Username{get;set;}
        /// <summary>
        /// The user's password hash. This is generated by Authentication.ComputePasswordHash()
        /// </summary>
        public virtual string PasswordHash{get;set;}
        /// <summary>
        /// The user's email. Not used by Authentication; only provided for convenience.
        /// </summary>
        public virtual string EmailAddress{get;set;}
        /// <summary>
        /// The unique ID assigned to the user. In a relational database, this could be something like a Row ID.
        /// This is populated by IUserStore upon saving to database/store
        /// </summary>
        public virtual string UniqueID{get;set;} 
        
        /// <summary>
        /// Salt which is used in password hashes and login hashes. 
        /// </summary>
        public virtual string Salt{get;set;}
        /// <summary>
        /// A list of groups the user belongs to.
        /// </summary>
        public virtual List<GroupData> Groups{get;set;}
       /* FIXME 
        /// <summary>
        /// Updates the UserStore with this UserData. Basically a shortcut for Authentication.UserStore.UpdateByID
        /// </summary>
        /// <returns>
        /// true if user updated successfully
        /// </returns>
        public bool Update(){
            if(string.IsNullOrEmpty(UniqueID)){
                return false;
            }
            return FSCAuth.UserStore.UpdateUserByID(this);
        }
        /// <summary>
        /// Inserts this UserData into the UserStore, generating the password in the process. Basically a shortcut for Authentication.AddUser
        /// </summary>
        /// <param name="password">
        /// The password to use for this user
        /// </param>
        /// <returns>
        /// true if successfully inserted
        /// </returns>
        public bool SaveNew(string password){
            if(!string.IsNullOrEmpty(UniqueID)){ //UniqueID can't already be set
                return false;
            }
            return FSCAuth.AddUser(this,password);
        }
        /// <summary>
        /// Deletes this UserData from the UserStore. Note, if successful, UniqueID will be set to null as well.
        /// </summary>
        /// <returns>
        /// true if successfully deleted
        /// </returns>
        public bool Delete(){
            bool res=FSCAuth.UserStore.DeleteUserByID(this);
            if(res){
                UniqueID=null;
            }
            return res;
        }
        /// <summary>
        /// Resets the password for this UserData, as well as updating the password for it in the UserStore. 
        /// </summary>
        /// <returns>
        /// The generated password. Returns null on error.
        /// </returns>
        public string ResetPassword(){
            if(string.IsNullOrEmpty(UniqueID)){
                return null;
            }
            return FSCAuth.ResetPassword(this);
        }
*/
    }
}

