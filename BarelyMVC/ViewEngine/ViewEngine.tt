<#@ template language="C#v3.5" hostspecific="true" #>
<#@ output extension="cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>

<#
/*
Copyright (c) 2010 - 2012 Jordan "Earlz/hckr83" Earls  <http://lastyearswishes.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.
   
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#>

<#
/*CONFIGURATION VARIABLES*/
	//default namespace for your views to use
	string Namespace="Earlz.BarelyMVC.ViewEngine"; 
	
	//default base class name to use (You must specify a valid class implementing IBarelyView!)
	string DefaultBaseClass="Earlz.BarelyMVC.ViewEngine.Internal.BarelyViewDummy"; 
	
	//What files to process as views. Use the | symbol to match multiple filetypes
	string SearchPattern="*.html"; 
	
	//The path relative to THIS file to look for View files (you almost always just want "" here)
	string TemplateDirectory=""; 
	
	//Specifies if to default to rendering directly to the HttpResponse or instead building a string and 
	//then writing the final string out to response all at one time. 
	bool DefaultRenderDirectly=false;
	
	//Specifies if `{= =}` output blocks should swallow and ignore null reference exceptions
	//This makes development much easier, but has a performance penalty because a 
	//try-catch attempt is needed at each variable output block `{= =}` Note, only the variable output block is affected by this setting.
	//There is no attempts to detect nulls anywhere else. 
	bool DefaultDetectNulls=true;
	
	//The default writer object to use(when direct rendering) 
	//you should only need to change this if you're not integrating this viewengine with BarelyMVC
	string DefaultWriterReference="Earlz.BarelyMVC.HttpHandler.CurrentWriter";
	
	//If your views require using statements, put them here.
	//A few essential namespaces are automatically included already
	string CustomUsing=@"
		//custom using statements for your views go here:
		
	";
	
/*END CONFIGURATION -- Touch everything past here at your own risk!*/	
//TODO Make this code more readable.. somehow. T4 is awesome, but hard to write and even harder to read. 
	string p=Path.GetDirectoryName(Host.TemplateFile);
	
	WriteLine("/*Generated by the BSD Licensed BarelyMVC ViewGenerator T4 file*/");
	WriteLine("using System.Text;");
	WriteLine("using System.Collections.Generic;");
	WriteLine("using System.Web;"); //optional-ish
	WriteLine("using System.IO;");
	WriteLine("using System;");
	WriteLine("using Earlz.BarelyMVC.ViewEngine;");
	//WriteLine("using Earlz.BarelyMVC.ViewEngine.Helpers;");
	WriteLine(CustomUsing);
	ViewGenerator.DefaultBaseClass=DefaultBaseClass;
	
	string[] filters = SearchPattern.Split('|');
	foreach(string filter in filters )
	{
		var files = Directory.GetFiles(p+TemplateDirectory, filter, SearchOption.AllDirectories);
		foreach(var file in files){
			WriteLine("/*File: "+file+" */");
			string name=Path.GetFileName(file);
			name=name.Substring(0,name.LastIndexOf(filter.Substring(1,filter.Length-1)));
			name=name.Replace(" ","_");
			var gen=new ViewGenerator(file,name,Namespace,DefaultRenderDirectly, DefaultDetectNulls, DefaultWriterReference);
			WriteLine(gen.Generate());
		}
	}
#>

<#@ include file="ViewEngineInternal.tt.cs" #>
